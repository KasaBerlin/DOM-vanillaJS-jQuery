innerText vs. textContent

- innerText returns the visible text contained in a node, while textContent returns the full text (also the text inside children) 
- innerText is more performance heavy

- HTML DOM methods are actions you can perform (on HTML Elements)
- HTML DOM properties are values (of HTML Elements) that you can set or change
e.g. In the example above, getElementById is a method, while innerHTML is a property

- The HTML DOM document object is the owner of all other objects in your web page.

Propertys - is a value that you can get or set (like changing the content of an HTML element)
to the element
- property onclick, onmouseover, and so on does not allow us to add multiple event listeners on the same element

Methods - is an action you can do (like add or deleting an HTML element)
to the document
If the element is not found, myElement will contain null (with get Element/s by)

------------------------------------------------------------------------------------

event delegation is the technique, bubbling is what the event itself does, and capturing is a way of using event delgation on events that don’t bubble.

Event delegation is a technique for listening to events where you delegate a parent element as the listener for all of the events that happen inside it.

Using a form field as an example, the event would bubble up to the parent form, then any containers or divs the form was in, then the body, then the html element, then the document, then the window.

There’s a trick you can use to capture the event, though. The last argument in addEventListener() is called useCapture. We almost always set it to false.

document.addEventListener('focus', function (event) {
	console.log(event.target);
}, false);

For events that don’t bubble, set it to true to capture the event anyways.

-----------------------------------------------------------------------------

e. is an object, you can read e.g. e.target.id (when you create an Eventlistener with click, it reads the clicked element) 

output.innerHTML='<h3>'+e.target.id+'</h3>'

clientx= from the window itself
offsetx=from the element

------------------------------------------------------------------------------

finding main, then finding p inside main
var x = document.getElementById("main");
var y = x.getElementsByTagName("p");

------------------------------------------------------------------------------

Finding HTML Elements by HTML Object Collections

var x = document.forms["frm1"];
var text = "";
var i;
for (i = 0; i < x.length; i++) {
  text += x.elements[i].value + "<br>";
}
document.getElementById("demo").innerHTML = text;

------------------------------------------------------------------------------

document.getElementById("image").src = "landscape.jpg";

Document object model - DOM
window
element

------------------------------------------------------------------------------

document.getElementById("myBtn").addEventListener("click", function() {
  myFunction(p1, p2);
});

function myFunction(a, b) {
  var result = a * b;
  document.getElementById("demo").innerHTML = result;
}

-------------------------------------------------------------------------------

// ul.insertAdjacentHTML("beforeend"); adds everytime before end of ul
// data-attributename = "value" - to create a new attributename
// Number() - to get back a Number
// dataset - you get back the data attributes you created
// dive from event deeper (see list dev tools console)

// For "button", "reset", and "submit" - it defines the text on the button
// For "text", "password", and "hidden" - it defines the initial (default) value of the input field
// For "checkbox", "radio", "image" - it defines the value associated with the input (this is also the value that is sent on submit)

// var test = document.querySelectorAll('input[value][type="checkbox"]:not([value=""])');
// get all inputs with the attribute "value" and has the attribute "value" that is not blank.

---------------------------------------------------------------------------------

for..of and NodeLists
Finally, another really useful case for for..of is in iterating of NodeLists. When we query the document for a group of elements, what we get returned is a NodeList, not an Array. This means that we can't iterate over the list using Array methods like forEach.

To solve this, we can either convert it to an Array using Array.from(), or use the for..of loop, which is applicable to more than just Arrays.

const elements = document.querySelectorAll('.foo');

for (const element of elements) {
    element.addEventListener('click', doSomething);
}

--------------------------------------------------------------------------------

- Window = represents the browser window - TOP LEVEL OBJECT
- Document = main object of the visible DOM - contains HTML etc. 